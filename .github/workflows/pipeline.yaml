name: Flask app CI/CD pipeline

on:
    push:
        branches: [ main ]
        paths-ignore:
          - 'README.md'
          - 'flask-app/**'
          - 'helm-charts/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
        -
            name: Checkout
            uses: actions/checkout@v2
        -
            name: Set up QEMU
            uses: docker/setup-qemu-action@v1
        -
            name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v1

        -
            name: Docker metadata
            id: metadata
            uses: docker/metadata-action@v3
            with:
                images: ${{ env.IMG_NAME }}
                tags: |
                    type=semver,pattern={{version}}
                    type=semver,pattern={{major}}.{{minor}}
                    type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}
        -
            name: Login to DockerHub
            uses: docker/login-action@v1 
            with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}
        -
            name: Build and push
            uses: docker/build-push-action@v2
            with:
                context: .
                file: ./Dockerfile
                platforms: linux/amd64, linux/arm64/v8
                push: true
                # tags: progerjkd/flask-app:latest
                tags: ${{ steps.metadata.outputs.tags }}
                labels: ${{ steps.metadata.outputs.labels }}
    # deployment:
    #   runs-on: 'ubuntu-latest'
    #   steps:
    #   - name: 'Deploy'
    #     uses: 'deliverybot/helm@master'
    #     with:
    #       token: '${{ github.token }}'
    #       chart: 'app'
    #       secrets: '${{ toJSON(secrets) }}'
    #       namespace: production
    #       release: production-myapp
    #       value-files: './config/production.yml'
    #     env:
    #       KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
